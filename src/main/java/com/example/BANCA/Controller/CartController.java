package com.example.BANCA.Controller;

import com.example.BANCA.Entyti.CartItem;
import com.example.BANCA.Entyti.Product;
import com.example.BANCA.Repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.support.SessionStatus;

import java.util.HashMap;
import java.util.Map;

@Controller
@SessionAttributes("cart")
public class CartController {

    @Autowired
    private ProductRepository productRepo;

    // Kh·ªüi t·∫°o gi·ªè h√†ng n·∫øu ch∆∞a c√≥
    @ModelAttribute("cart")
    public Map<Long, CartItem> cart() {
        return new HashMap<>();
    }

    @PostMapping("/cart/add")
    public String addToCart(@RequestParam Long productId, @RequestParam int quantity,
                            @ModelAttribute("cart") Map<Long, CartItem> cart,
                            Model model) {

        Product product = productRepo.findById(productId).orElseThrow();

        cart.compute(productId, (id, item) -> {
            if (item == null) {
                return new CartItem(product, quantity);
            } else {
                item.setQuantity(item.getQuantity() + quantity);
                return item;
            }
        });

        // Th√™m th√¥ng tin v√†o Model ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng
        model.addAttribute("cartSize", cart.size());
        model.addAttribute("totalPrice", cart.values().stream()
                .mapToDouble(item -> item.getProduct().getPrice() * item.getQuantity())
                .sum());

        return "fragments :: cartSummary";  // Tr·∫£ v·ªÅ m·ªôt ph·∫ßn t·ª≠ HTML (fragments) ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng
    }


    // üëâ Xem gi·ªè h√†ng
    @GetMapping("/cart")
    public String showCart(@ModelAttribute("cart") Map<Long, CartItem> cart, Model model) {
        model.addAttribute("cartItems", cart.values());

        // T√≠nh t·ªïng ti·ªÅn c·ªßa gi·ªè h√†ng
        double totalPrice = cart.values().stream()
                .mapToDouble(item -> item.getProduct().getPrice() * item.getQuantity())
                .sum();
        model.addAttribute("totalPrice", totalPrice);

        return "cart"; // cart.html
    }

    // üëâ X√≥a m·ªôt s·∫£n ph·∫©m kh·ªèi gi·ªè
    @PostMapping("/cart/remove")
    public String removeFromCart(@RequestParam Long productId,
                                 @ModelAttribute("cart") Map<Long, CartItem> cart) {
        cart.remove(productId);
        return "redirect:/cart";
    }

    // üëâ X√≥a to√†n b·ªô gi·ªè
    @PostMapping("/cart/clear")
    public String clearCart(SessionStatus status) {
        status.setComplete(); // X√≥a session
        return "redirect:/cart";
    }
}
